# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: dmm-title-watcher # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  region: ${env:AWS_DEFAULT_REGION}
  stage: ${opt:stage, 'dev'}
  timeout: 30
  environment:
    STAGE: ${self:provider.stage}
    DMM_API_ID: ${env:DMM_API_ID}
    DMM_AFFILIATE_ID: ${env:DMM_AFFILIATE_ID}
    SLACK_TOKEN: ${env:SLACK_TOKEN}
    SLACK_CHANNEL_ID: ${env:SLACK_CHANNEL_ID}
    TABLE_PRODUCTS: ${self:custom.table.products}
    TABLE_SUBSCRIPTIONS: ${self:custom.table.subscriptions}
    TABLE_BOOKMARKS: ${self:custom.table.bookmarks}
    GW_URL: ${self:custom.gw-url.${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - Fn::Join:
          - ":"
          - - arn:aws:dynamodb
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - table/${self:custom.table.products}
        - Fn::Join:
          - ":"
          - - arn:aws:dynamodb
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - table/${self:custom.table.subscriptions}
        - Fn::Join:
          - ":"
          - - arn:aws:dynamodb
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - table/${self:custom.table.bookmarks}

package:
  exclude:
    - script/**
    - test/**
    - Dockerfile

plugins:
  - serverless-offline-dynamodb-streams
  - serverless-offline
  - serverless-mocha-plugin

custom:
  table:
    products: ${self:service}-${self:provider.stage}-products
    subscriptions: ${self:service}-${self:provider.stage}-subscriptions
    bookmarks: ${self:service}-${self:provider.stage}-bookmarks
  gw-url:
    prod:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
    dev: http://localhost:3000
    test: http://localhost:3001
  serverless-offline-dynamodb-streams:
    endpoint: http://dynamodb:8000
    region: ${self:provider.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

functions:
  subscriptionsCreate:
    handler: subscriptions.create
    events:
      - http:
          path: subscriptions
          method: post
  subscriptionsSubscribeActerss:
    handler: subscriptions.subscribeActress
    events:
      - http:
          path: subscriptions/actress/{id}/subscribe
          method: get
  subscriptionsIndex:
    handler: subscriptions.index
    events:
      - http:
          path: subscriptions
          method: get
  subscriptionShow:
    handler: subscriptions.show
    events:
      - http:
          path: subscriptions/{id}
          method: get
  # subscriptionsUpdate:
  #   handler: subscriptions.update
  #   events:
  #     - http:
  #         path: subscriptions/{id}
  #         method: put
  subscriptionsDelete:
    handler: subscriptions.delete
    events:
      - http:
          path: subscriptions/{id}
          method: delete

  productsSearch:
    handler: products.search
    events:
      - http:
          path: subscriptions/{id}/products/search
          method: post
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - SubscriptionsTable
              - StreamArn
  productsSearchAll:
    handler: products.searchAll
    timeout: 60
    events:
      - schedule: cron(45 23 * * ? *) # JST 8:45 AM
  productsNotify:
    handler: products.notify
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ProductsTable
              - StreamArn
  bookmarksCreate:
    handler: bookmarks.create
    events:
      - http:
          path: /products/{id}/bookmarks/create
          method: get
  bookmarksDelete:
    handler: bookmarks.delete
    events:
      - http:
          path: /products/{id}/bookmarks/delete
          method: get
  bookmarksRemind:
    handler: bookmarks.remind
    events:
      - schedule: cron(50 23 * * ? *) # JST 8:50 AM

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.products}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.subscriptions}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: KEYS_ONLY
    BookmarksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table.bookmarks}
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1